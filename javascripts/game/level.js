// Generated by CoffeeScript 1.3.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

if (window.CarnageGame == null) {
  window.CarnageGame = {};
}

window.CarnageGame.Level = (function(_super) {

  __extends(_Class, _super);

  function _Class(name) {
    var _this = this;
    this.name = name;
    this.TILES = {
      0xFF00FF: null,
      0x000000: CarnageGame.Tiles.Wall,
      0xFFFFFF: CarnageGame.Tiles.Floor,
      0x0000FF: CarnageGame.Tiles.Spawn
    };
    this.imageLoaded = false;
    this.level = [];
    this.image = new Image();
    this.image.src = 'maps/' + this.name;
    this.image.onload = function() {
      _this.imageLoaded = true;
      return _this.parseLevel();
    };
    after(2000, function() {
      if (!_this.imageLoaded) {
        return _this.emit('load', new Error('File maps/' + _this.name + ' could not be loaded.'));
      }
    });
  }

  /*
      CarnageGame::Level.parseLevel()
  
      Creates a temporary canvas object, draws the level on it
      to use .getImageData() to finally generate a levels hash
  */


  _Class.prototype.parseLevel = function() {
    var data, hex, row, x, y, _i, _j, _ref, _ref1;
    this.canvas = $('<canvas>');
    $('body').append(this.canvas);
    this.canvas[0].width = this.image.width;
    this.canvas[0].height = this.image.height;
    this.context = this.canvas[0].getContext('2d');
    this.context.drawImage(this.image, 0, 0);
    for (x = _i = 0, _ref = this.image.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
      row = [];
      for (y = _j = 0, _ref1 = this.image.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        data = this.context.getImageData(x, y, 1, 1).data;
        hex = data[2] | (data[1] << 8) | (data[0] << 16);
        if (this.TILES[hex]) {
          row.push(new this.TILES[hex](x, y));
        } else {
          row.push(null);
        }
      }
      this.level.push(row);
    }
    return this.emit('load');
  };

  return _Class;

})(CarnageGame.EventEmitter);
