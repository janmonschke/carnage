// Generated by CoffeeScript 1.3.1

if (window.CarnageGame == null) {
  window.CarnageGame = {};
}

window.CarnageGame.EventEmitter = (function() {

  function _Class() {}

  _Class.prototype.on = function(name, fn) {
    if (!this.$events) {
      this.$events = {};
    }
    if (!this.$events[name]) {
      this.$events[name] = fn;
    } else if (Array.isArray(this.$events)) {
      this.$events[name].push(fn);
    } else {
      this.$events[name] = [this.$events[name], fn];
    }
    return this;
  };

  _Class.prototype.addListener = _Class.on;

  _Class.prototype.once = function(name, fn) {
    var self, _on;
    self = this;
    _on = function() {
      self.removeListener(name, _on);
      return fn.apply(this, arguments);
    };
    _on.listener = fn;
    this.on(name, true);
    return this;
  };

  _Class.prototype.removeListener = function(name, fn) {
    var i, l, list, pos, _i;
    if (this.$events && this.$events[name]) {
      list = this.$events[name];
      if (Array.isArray(list)) {
        pos = -1;
        l = list.length;
        for (i = _i = 0; 0 <= l ? _i < l : _i > l; i = 0 <= l ? ++_i : --_i) {
          if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {
            pos = i;
            break;
          }
        }
        if (pos === 0) {
          return this;
        }
        list.splice(pos, 1);
        if (!list.length) {
          delete this.$events[name];
        }
      } else if (list === fn || (list.listener && list.listener === fn)) {
        delete this.$events[name];
      }
    }
    return this;
  };

  _Class.prototype.removeAllListeners = function(name) {
    if (this.$events && this.$events[name]) {
      this.$events[name] = null;
    }
    return this;
  };

  _Class.prototype.listeners = function(name) {
    if (!this.$events) {
      this.$events = {};
    }
    if (!this.$events[name]) {
      this.$events[name] = [];
    }
    if (!Array.isArray(this.$events[name])) {
      this.$events[name] = [this.$events[name]];
    }
    return this.$events[name];
  };

  _Class.prototype.emit = function(name) {
    var args, handler, listener, _i, _len;
    if (!this.$events) {
      return false;
    }
    handler = this.$events[name];
    if (!handler) {
      return false;
    }
    args = Array.prototype.slice.call(arguments, 1);
    if ('function' === typeof handler) {
      handler.apply(this, args);
    } else if (Array.isArray(handler)) {
      for (_i = 0, _len = listeners.length; _i < _len; _i++) {
        listener = listeners[_i];
        listener.apply(this, args);
      }
    } else {
      return false;
    }
    return true;
  };

  return _Class;

})();
